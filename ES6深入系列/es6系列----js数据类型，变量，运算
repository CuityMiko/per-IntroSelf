####es6系列----js数据类型，变量，运算
// Symbol
// Subclassable Built-ins 可子类化的内建对象
// Math + Number + String + Object APIs 扩展
// Binary and Octal Literals 二进制和八进制字面量
// Destructuring 解构
// Default + Rest + Spread 默认值+多余参数组合+参数伸展
// Let + Const 操作符

-------------------------------------------------------------------------------------
Symbol
-------------------------------------------------------------------------------------
符号(Symbol) 能够实现针对对象状态的访问控制，允许使用string(与ES5相同)或symbol作为键来访问属性。符号是一个新的原语类型，可选的name参数可以用于调试——但并不是符号身份的一部分。符号是独一无二的(如同gensym（所产生的符号）)，但不是私有的，因为它们可以通过类似Object.getOwnPropertySymbols的反射特性暴露出来。

	var MyClass = (function() {

		// 具有模块作用域的符号
		var key = Symbol("key");

		function MyClass(privateData) {
			this[key] = privateData;
		}

		MyClass.prototype = {
			doStuff: function() {
			  ... this[key] ...
			}
		};

		return MyClass;
	})();

	var c = new MyClass("hello")
	c["key"] === undefined

-------------------------------------------------------------------------------------
Subclassable Built-ins 可子类化的内建对象
-------------------------------------------------------------------------------------
在 ES6 中，内建对象，如Array、Date以及DOM元素可以被子类化。
针对名为Ctor的函数，其对应的对象的构造现在分为两个阶段（这两个阶段都使用虚分派）：
    
    1、调用Ctor[@@create]为对象分配空间，并插入特殊的行为
    2、在新实例上调用构造函数来进行初始化

已知的@@create符号可以通过Symbol.create来使用，内建对象现在显式暴露它们的@@create。

	// Pseudo-code of Array
	// Array伪代码
	class Array {
	    constructor(...args) { /* ... */ }
	    static [Symbol.create]() {
	        // Install special [[DefineOwnProperty]]
	        // to magically update 'length'
	    }
	}

	// User code of Array subclass
	// Array子类的用户代码
	class MyArray extends Array {
	    constructor(...args) { super(...args); }
	}

	// Two-phase 'new':
	// 1) Call @@create to allocate object
	// 2) Invoke constructor on new instance

	// 两阶段的'new':
	// 1) 调用@@create来为对象分配空间
	// 2) 在新实例上调用构造函数
	var arr = new MyArray();
	arr[1] = 12;
	arr.length == 2

-------------------------------------------------------------------------------------
Math + Number + String + Object APIs 扩展
-------------------------------------------------------------------------------------
新加入了许多库，包括核心数学库，进行数组转换的协助函数，以及用来进行拷贝的Object.assign。

	Number.EPSILON
	Number.isInteger(Infinity) // false
	Number.isNaN("NaN") // false

	Math.acosh(3) // 1.762747174039086
	Math.hypot(3, 4) // 5
	Math.imul(Math.pow(2, 32) - 1, Math.pow(2, 32) - 2) // 2

	"abcde".includes("cd") // true
	"abc".repeat(3) // "abcabcabc"

	Array.from(document.querySelectorAll('*')) // Returns a real Array 返回一个真正的Array
	Array.of(1, 2, 3) // Similar to new Array(...), but without special one-arg behavior 与Array(...)类似，但只有一个参数时，并不会有特殊行为。

	[0, 0, 0].fill(7, 1) // [0,7,7]
	[1, 2, 3].find(x => x == 3) // 3
	[1, 2, 3].findIndex(x => x == 2) // 1
	["a", "b", "c"].entries() // iterator [0, "a"], [1,"b"], [2,"c"]
	["a", "b", "c"].keys() // iterator 0, 1, 2
	["a", "b", "c"].values() // iterator "a", "b", "c"
	Object.assign(Point, { origin: new Point(0,0) })

-------------------------------------------------------------------------------------
Binary and Octal Literals 二进制和八进制字面量
-------------------------------------------------------------------------------------
加入对二进制(b)和八进制(o)字面量的支持。
	
	0b111110111 === 503 // true
	0o767 === 503 // true

-------------------------------------------------------------------------------------
Destructuring 解构
-------------------------------------------------------------------------------------
解构允许在（变量-值）绑定时使用模式匹配，支持匹配数组和对象，解构支持失效弱化，与标准的对象查询foo["bar"]相似，当查询无结果时生成undefined值。

	// 列表匹配
	var [a, , b] = [1,2,3];

	// 对象匹配
	var { op: a, lhs: { op: b }, rhs: c }
	       = getASTNode()

	// binds `op`, `lhs` and `rhs` in scope
	// 对象匹配简写形式
	var {op, lhs, rhs} = getASTNode()

	// 上面作者给的示例看得云里雾里的，这里我再给出一个
	function today() { return { d: 2, m: 3, y: 2015 }; }
	var { m: month, y: year } = today(); // month = 3, year = 2015

	// 也可以作为参数使用
	function g({name: x}) {
	  console.log(x);
	}
	g({name: 5})

	// 失效弱化解构，结果查询不到时定义为 undefined
	var [a] = [];
	a === undefined;

	// 具备默认值的失效弱化解构
	var [a = 1] = [];
	a === 1;

-------------------------------------------------------------------------------------
Default + Rest + Spread 默认值+多余参数组合+参数伸展
-------------------------------------------------------------------------------------
支持由被调用函数进行求值的参数默认值。 在函数调用时使用...运算符，可以将作为参数的数组拆解为连续的多个参数。 在函数定义时使用...运算符，则可以将函数尾部的多个参数绑定到一个数组中。 “多余参数组合”取代了arguments，并可更直接地应用于通常的用例中。
		
		// default 12为默认值
		function f(x, y=12) {
		  return x + y;
		}
		f(3) == 15

		// rest // y is an Array
		function f(x, ...y) {
		  return x * y.length;
		}
		f(3, "hello", true) == 6

		// 参数甚至
		function f(x, y, z) {
		  return x + y + z;
		}
		// Pass each elem of array as argument
		f(...[1,2,3]) == 6

-------------------------------------------------------------------------------------
Let + Const 操作符
-------------------------------------------------------------------------------------
let 和 const 是具有块级作用域的绑定用构造，let 是新的 var，只在块级作用域内有效，const 是单赋值，声明的是块级作用域的常量。此两种操作符具有静态限制，可以防止出现“在赋值之前使用”的错误。

	function f() {
	  {
	    let x;
	    {
	      // okay, block scoped name
	      const x = "sneaky";
	      // error, const
	      x = "foo";
	    }
	    // error, already declared in block
	    let x = "inner";
	  }
	}







