####es6系列----JS操作
// Iterators + For..Of 迭代器 + For..of 循环
// Map + Set + WeakMap + WeakSet 数据结构
// Promises 对象
// Reflect API 反射API
// Tail Calls 尾调用

-------------------------------------------------------------------------------------
Iterators + For..Of 迭代器 + For..of 循环
-------------------------------------------------------------------------------------
迭代器对象允许像 CLI IEnumerable 或者 Java Iterable 一样自定义迭代器。将for..in转换为自定义的基于迭代器的形如for..of的迭代，不需要实现一个数组，支持像 LINQ 一样的惰性设计模式

	let fibonacci = {
	  [Symbol.iterator]() {
	    let pre = 0, cur = 1;
	    return {
	      next() {
	        [pre, cur] = [cur, pre + cur];
	        return { done: false, value: cur }
	      }
	    }
	  }
	}

	for (var n of fibonacci) {
	  // truncate the sequence at 1000
	  if (n > 1000)
	    break;
	  console.log(n);
	}

迭代器基于这些鸭子类型的接口 (此处使用TypeScript 的类型语法，仅用于阐述问题)：

	interface IteratorResult {
	  done: boolean;
	  value: any;
	}
	interface Iterator {
	  next(): IteratorResult;
	}
	interface Iterable {
	  [Symbol.iterator](): Iterator
	}

-------------------------------------------------------------------------------------
Map + Set + WeakMap + WeakSet 数据结构
-------------------------------------------------------------------------------------
Efficient data structures for common algorithms. WeakMaps provides leak-free object-key’d side tables. 用于实现常见算法的高效数据结构，WeakMaps提供不会泄露的对象键(对象作为键名，而且键名指向对象)索引表 注：所谓的不会泄露，指的是对应的对象可能会被自动回收，回收后WeakMaps自动移除对应的键值对，有助于防止内存泄露

	// Sets
	var s = new Set();
	s.add("hello").add("goodbye").add("hello");
	s.size === 2;
	s.has("hello") === true;

	// Maps
	var m = new Map();
	m.set("hello", 42);
	m.set(s, 34);
	m.get(s) == 34;

	// Weak Maps
	var wm = new WeakMap();
	wm.set(s, { extra: 42 });
	wm.size === undefined

	// Weak Sets
	var ws = new WeakSet();
	ws.add({ data: 42 });
	// Because the added object has no other references, it will not be held in the set
	// 由于所加入的对象没有其他引用，故在此集合内不会保留之。

-------------------------------------------------------------------------------------
Promises 对象
-------------------------------------------------------------------------------------
Promise是用来进行异步编程的库。Promise是对一个“将来可能会变得可用”的值的第一类表示，Promise被使用在现有的许多JavaScript库中。

	function timeout(duration = 0) {
	    return new Promise((resolve, reject) => {
	        setTimeout(resolve, duration);
	    })
	}

	var p = timeout(1000).then(() => {
	    return timeout(2000);
	}).then(() => {
	    throw new Error("hmm");
	}).catch(err => {
	    return Promise.all([timeout(100), timeout(200)]);
	})

-------------------------------------------------------------------------------------
Reflect API 反射API
-------------------------------------------------------------------------------------
完整的反射API。此API在对象上暴露了运行时级别的元操作，从效果上来说，这是一个反代理API，并允许调用与代理陷阱中相同的元操作。实现代理非常有用。
-------------------------------------------------------------------------------------
Tail Calls 尾调用
-------------------------------------------------------------------------------------
保证尾部调用时栈不会无限增长，这使得递归算法在面对未作限制的输入时，能够安全地执行。

	function factorial(n, acc = 1) {
	    'use strict';
	    if (n <= 1) return acc;
	    return factorial(n - 1, n * acc);
	}





